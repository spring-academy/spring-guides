<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<articleinfo>
    <date>2023-08-29</date>
</articleinfo>
<simpara>If you are building a web site for your business, you probably need to add some management
services. Spring Boot provides several such services (such as health, audits, beans, and
more) with its
<ulink url="http://docs.spring.io/spring-boot/docs/3.1.1/reference/htmlsingle/#production-ready">actuator module</ulink>.</simpara>
<simpara>Add the following dependency to your <literal>build.gradle</literal> file:</simpara>
<programlisting language="groovy" linenumbering="indent=0">implementation 'org.springframework.boot:spring-boot-starter-actuator'</programlisting>
<simpara>Then restart the application. This time, let&#8217;s use the command line.
First,stop the application using the Stop button (the red square) in the dialog towards the top of the Editor:</simpara>
<simpara><inlinemediaobject>
  <imageobject>
  <imagedata fileref="images/editor-start-stop-dialog.png"/>
  </imageobject>
  <textobject><phrase>images/editor-start-stop-dialog.png</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>Now, in the <emphasis role="strong">uppermost Terminal</emphasis>, run the application as follows:</simpara>
<informalexample>
<programlisting language="text" linenumbering="unnumbered">$ ./gradlew bootRun</programlisting>
</informalexample>
<simpara>You should see that a new set of RESTful end points have been added to the application.
These are management services provided by Spring Boot. The following listing shows typical
output:</simpara>
<informalexample>
<programlisting language="text" linenumbering="unnumbered">org.springframework.boot.actuate.autoconfigure.availability.AvailabilityHealthContributorAutoConfiguration
org.springframework.boot.actuate.autoconfigure.availability.AvailabilityProbesAutoConfiguration
org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration
org.springframework.boot.actuate.autoconfigure.endpoint.jackson.JacksonEndpointAutoConfiguration
org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration
org.springframework.boot.actuate.autoconfigure.endpoint.web.ServletEndpointManagementContextConfiguration$WebMvcServletEndpointManagementContextConfiguration
org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration
org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointAutoConfiguration$WebEndpointServletConfiguration
org.springframework.boot.actuate.autoconfigure.endpoint.web.servlet.WebMvcEndpointManagementContextConfiguration
org.springframework.boot.actuate.autoconfigure.health.HealthContributorAutoConfiguration
org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration
org.springframework.boot.actuate.autoconfigure.health.HealthEndpointConfiguration
org.springframework.boot.actuate.autoconfigure.health.HealthEndpointWebExtensionConfiguration
org.springframework.boot.actuate.autoconfigure.health.HealthEndpointWebExtensionConfiguration$MvcAdditionalHealthEndpointPathsConfiguration
org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration
org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryAutoConfiguration
org.springframework.boot.actuate.autoconfigure.metrics.JvmMetricsAutoConfiguration
org.springframework.boot.actuate.autoconfigure.metrics.LogbackMetricsAutoConfiguration
org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration
org.springframework.boot.actuate.autoconfigure.metrics.SystemMetricsAutoConfiguration
org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration
org.springframework.boot.actuate.autoconfigure.metrics.integration.IntegrationMetricsAutoConfiguration
org.springframework.boot.actuate.autoconfigure.metrics.startup.StartupTimeMetricsListenerAutoConfiguration
org.springframework.boot.actuate.autoconfigure.metrics.task.TaskExecutorMetricsAutoConfiguration
org.springframework.boot.actuate.autoconfigure.metrics.web.tomcat.TomcatMetricsAutoConfiguration
org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration
org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration$MeterObservationHandlerConfiguration
org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration$MeterObservationHandlerConfiguration$OnlyMetricsMeterObservationHandlerConfiguration
org.springframework.boot.actuate.autoconfigure.observation.ObservationAutoConfiguration$OnlyMetricsConfiguration
org.springframework.boot.actuate.autoconfigure.observation.web.client.HttpClientObservationsAutoConfiguration
org.springframework.boot.actuate.autoconfigure.observation.web.client.HttpClientObservationsAutoConfiguration$MeterFilterConfiguration
org.springframework.boot.actuate.autoconfigure.observation.web.client.RestTemplateObservationConfiguration
org.springframework.boot.actuate.autoconfigure.observation.web.servlet.WebMvcObservationAutoConfiguration
org.springframework.boot.actuate.autoconfigure.observation.web.servlet.WebMvcObservationAutoConfiguration$MeterFilterConfiguration
org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthContributorAutoConfiguration
org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration
org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration
org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration$SameManagementContextConfiguration$EnableSameManagementContextConfiguration
org.springframework.boot.actuate.autoconfigure.web.servlet.ServletManagementContextAutoConfiguration</programlisting>
</informalexample>
<simpara>By default, the actuator exposes the following endpoints:</simpara>
<itemizedlist>
<listitem>
<simpara>
<literal>/actuator/health</literal> - Gives a summary of the health of the application.
</simpara>
</listitem>
<listitem>
<simpara>
<literal>/actuator</literal> - Lists all of the Actuator endpoints that are available in the application. You can configure your app the expose as many or few of the Actuator endpoints as you need.
</simpara>
</listitem>
</itemizedlist>
<note><simpara>There is also an <literal>/actuator/shutdown</literal> endpoint, but, by default, it is visible only
through JMX. To <ulink url="http://docs.spring.io/spring-boot/docs/3.1.1/reference/htmlsingle/#production-ready-endpoints-enabling-endpoints">enable it as an HTTP endpoint</ulink>, add
<literal>management.endpoint.shutdown.enabled=true</literal> to your <literal>application.properties</literal> file
and expose it with <literal>management.endpoints.web.exposure.include=health,info,shutdown</literal>.
However, you probably should not enable the shutdown endpoint for a publicly available
application.</simpara></note>
<simpara>You can check the health of the application by running the following command in the <emphasis role="strong">lower Terminal</emphasis>:</simpara>
<informalexample>
<programlisting language="bash" linenumbering="unnumbered">$ curl http://localhost:8080/actuator/health
{"status":"UP","groups":["liveness","readiness"]}</programlisting>
</informalexample>
<simpara>You can try also to invoke shutdown through curl, to see what happens when you have not
added the necessary line (shown in the preceding note) to <literal>application.properties</literal>:</simpara>
<informalexample>
<programlisting language="bash" linenumbering="unnumbered">$ curl -X POST localhost:8080/actuator/shutdown
{"timestamp":"2023-06-30T20:24:25.564+00:00","status":404,"error":"Not Found","path":"/actuator/shutdown"}</programlisting>
</informalexample>
<simpara>Because we did not enable it, the requested endpoint is not available (because the endpoint does not
exist).</simpara>
<simpara>For more details about each of these REST endpoints and how you can tune their settings
with an <literal>application.properties</literal> file (in <literal>springboot/src/main/resources</literal>), see the
the <ulink url="http://docs.spring.io/spring-boot/docs/3.1.1/reference/htmlsingle/#production-ready-endpoints">documentation about the endpoints</ulink>.</simpara>
</article>
