<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<articleinfo>
    <date>2023-08-29</date>
</articleinfo>
<simpara>You will want to add a test for the endpoint you added, and Spring Test provides some
machinery for that.</simpara>
<simpara>You should see the following dependency in your <literal>build.gradle</literal> file:</simpara>
<programlisting language="groovy" linenumbering="indent=0">testImplementation 'org.springframework.boot:spring-boot-starter-test'</programlisting>
<section id="_unit_tests">
<title>Unit Tests</title>
<simpara>Now write a simple unit test that mocks the servlet request and response through your
endpoint. Create a file called
<literal>springboot/src/test/java/com/example/springboot/HelloControllerTest.java</literal> with the following contents:</simpara>
<informalexample>
<programlisting language="java" linenumbering="unnumbered">package com.example.springboot;

import static org.hamcrest.Matchers.equalTo;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.Test;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframewoak.test.web.servlet.request.MockMvcRequestBuilders;

@SpringBootTest
@AutoConfigureMockMvc
public class HelloControllerTest {

        @Autowired
        private MockMvc mvc;

        @Test
        public void getHello() throws Exception {
                mvc.perform(MockMvcRequestBuilders.get("/").accept(MediaType.APPLICATION_JSON))
                                .andExpect(status().isOk())
                                .andExpect(content().string(equalTo("Greetings from Spring Boot!")));
        }
}</programlisting>
</informalexample>
<simpara><literal>MockMvc</literal> comes from Spring Test and lets you, through a set of convenient builder
classes, send HTTP requests into the <literal>DispatcherServlet</literal> and make assertions about the
result. Note the use of <literal>@AutoConfigureMockMvc</literal> and <literal>@SpringBootTest</literal> to inject a
<literal>MockMvc</literal> instance. Having used <literal>@SpringBootTest</literal>, we are asking for the whole application
context to be created. An alternative would be to ask Spring Boot to create only the web
layers of the context by using <literal>@WebMvcTest</literal>. In either case, Spring Boot automatically
tries to locate the main application class of your application, but you can override it or
narrow it down if you want to build something different.</simpara>
</section>
<section id="_integration_tests">
<title>Integration Tests</title>
<simpara>As well as mocking the HTTP request cycle, you can also use Spring Boot to write a simple
full-stack integration test. For example, instead of (or as well as) the mock test shown
earlier, we could create the following test (from
<literal>springboot/src/test/java/com/example/springboot/HelloControllerIT.java</literal>):</simpara>
<informalexample>
<programlisting language="java" linenumbering="unnumbered">package com.example.springboot;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.ResponseEntity;
import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class HelloControllerIT {
    @Autowired
    private TestRestTemplate template;

    @Test
    public void getHello() throws Exception {
        ResponseEntity&lt;String&gt; response = template.getForEntity("/", String.class);
        assertThat(response.getBody()).isEqualTo("Greetings from Spring Boot!");
    }
}</programlisting>
</informalexample>
<simpara>The embedded server starts on a random port because of
<literal>webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT</literal>, and the actual port is
configured automatically in the base URL for the <literal>TestRestTemplate</literal>.</simpara>
</section>
</article>
